import datetime

from http import HTTPStatus
from sqlalchemy import func
from flask_jwt_extended import jwt_required
from flask_restplus import Resource, reqparse, fields
from ...settings import sess
from ..api import api
from ...database import Pasien, CheckIn, TesLab

checkin_namespace = api.namespace('v1/checkin', description='Daftar Lab') #

_data_get_req = reqparse.RequestParser()
_data_get_req.add_argument('PasienID', required=True, location='form', help='noKTP (sementara)')
_data_get_req.add_argument('Statusregistrasi', required=True, location='form', choices=('Rujukan','Umum'), help='Rujukan/Umum')
_data_get_req.add_argument('metodebayar', required=True, location='form', choices=('Asuransi','Umum'), help='YYYY/MM/DD')
_data_get_req.add_argument('statusbayar', default='Belum Bayar',location='form', choices=('Sudah Bayar','Belum Bayar'),help='Sudah Bayar/Belum Bayar')
_data_get_req.add_argument('UjiLab',action='split', required=True, location='form',help='Uji lab apa saja yang akan ditambahkan')
_data_get_return = api.model('Token', {
    'status':fields.String(description='Status Berhasil'),
})

@checkin_namespace.route('')
@api.doc(responses={
    HTTPStatus.UNPROCESSABLE_ENTITY:'Invalid token.'
})
class checkinAPI(Resource):
    @jwt_required
    @api.expect(_data_get_req, validate=True)
    @api.response(HTTPStatus.UNAUTHORIZED, 'gagal masuk')
    @api.marshal_with(_data_get_return, description='Token generated.')
    def post(self):
        r = _data_get_req.parse_args()
        result = {'status': None}
        IDpasien = r['PasienID']
        Statusregistrasi = r['Statusregistrasi']
        metodebayar = r['metodebayar']
        statusbayar = r['statusbayar']
        ujilab = r['UjiLab']
        waktu = datetime.datetime.now()
        shift = datetime.datetime.now().strftime("%X")
        #buat jadwal shift perawat
        if ((shift> "06:59:00") and (shift<"12:00:00")):
            perawatID = 2 #ini contoh kasus, nanti bisa diganti
        elif ((shift > "11:59:59") and (shift < "17:00:00")):
            perawatID = 3
        elif ((shift > "16:59:59") and (shift < "22:00:00")):
            perawatID = 4

        #query :Pasien
        session = sess()
        #nge filter pasien ID tertentu ini beneran ada apa engga di Pasien
        query   = session.query(Pasien).filter(Pasien.noKTP == IDpasien).one_or_none()
        if query: #berarti pasiennya udah terdaftar makanya dia bisa checkin
            entry = CheckIn(IDpasien, Statusregistrasi, metodebayar, statusbayar, waktu)  # waktu itu waktu masuknya data dari frontend, jadi autogenerated
            session.add(entry)
            session.commit()
            no= session.query(func.max(CheckIn.id)) #no checkIn yang terakhir
            for i in range(len(ujilab)):
                lab = TesLab(no, perawatID,ujilab[i],None,None,None,waktu,None)
                session.add(lab)
                session.commit()
            #sekarang buat masukin data di lab
            result['status'] = 'Check-in berhasil'
        else:

            result['status'] = 'Pasien tidak ditemukan, silakan daftar dahulu'
        session.close()
        return result

